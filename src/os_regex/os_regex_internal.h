/*   $OSSEC, os_regex_internal.h, v0.3, 2005/04/05, Daniel B. Cid$   */

/* Copyright (C) 2003,2004,2005 Daniel B. Cid <dcid@ossec.net>
 * All right reserved.
 *
 * This program is a free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */


#ifndef __OS_INTERNAL_H
#define __OS_INTERNAL_H

/*
 * Defining some caracters to be used.
*/


#define BACKSLASH   '\\'
#define ENDSTR      '\0'
#define ENDLINE     '\n'
#define BEGINREGEX  '^'
#define ENDREGEX    '$'
#define OR          '|'
#define AND         '&'

#define TRUE         1 
#define FALSE        0



/* uchar */
typedef unsigned char uchar;

/* Is a number ?
 * 0-9
 * Return 0 if true
 */
#define _IsD(x) ((x >= 48) && (x <= 57))
#define GetS(x) (x-48)

/* Is it a character ?
 * a-z or A-Z or 0-9
 * Return 0 if true
 */
#define _IsW(x)    ((x >= 48 && x <= 57 )|| \
		    (x >= 65 && x <= 90 )|| \
		    (x >= 97 && x <= 122)) 

/* Is it a ' ' (blank)
 * Ascii 32
 * Return 0 if true
 */
#define _IsS(x)	(x == 32)

/* Check for parenthesis */
#define prts(x) (x == ')' || x == '(')

/* Will return +32 or -32 for case
 * insensitive searches.
 * Use GetCaseCS if using case sensitive.
 */
 
#define GetCase(x) (x >= 65 && x <= 90)?(+32):(x >= 97 && x <= 112)?(-32):(0)
#define GetCaseCS(x,y) (y == CS)?(x+0):(x >= 65 && x <= 90)?(x+32):(x >= 97 && x <= 112)?(x-32):(x+0)
#define CharCmp(x,y) (x == y)?(1): \
                     (y >= 97 && y <= 112 && x == (y-32))?(1): \
                     (y >= 65 && y <= 90 && x == (y+32))?(1):(0)
#define Regex(x,y)   (x == 'd' && y >= 48 && y <= 57)?(1):(0)|| \
                     (x == 'w' && \
                     ((y >= 48 && y <= 57)|| \
                      (y >= 65 && y <= 90)|| \
                      (y >= 97 && y <= 122)))?(1):(0)|| \
                     (x == 's' && y == 32)?(1):(0)|| \
                     (x == 'S' && y != 32)?(1):(0)|| \
                     (x == '.')?(1):(0)|| \
                     (x == 'D' && (y < 48 || y > 57))?(1):(0)|| \
                     (x == 'W' && (y < 48 || y > 122 || \
                     (y > 57 && y <65)||(y > 90 && y< 97)))?(1):(0)


static const uchar charmap[] = {
        '\000', '\001', '\002', '\003', '\004', '\005', '\006', '\007',
        '\010', '\011', '\012', '\013', '\014', '\015', '\016', '\017',
        '\020', '\021', '\022', '\023', '\024', '\025', '\026', '\027',
        '\030', '\031', '\032', '\033', '\034', '\035', '\036', '\037',
        '\040', '\041', '\042', '\043', '\044', '\045', '\046', '\047',
        '\050', '\051', '\052', '\053', '\054', '\055', '\056', '\057',
        '\060', '\061', '\062', '\063', '\064', '\065', '\066', '\067',
        '\070', '\071', '\072', '\073', '\074', '\075', '\076', '\077',
        '\100', '\141', '\142', '\143', '\144', '\145', '\146', '\147',
        '\150', '\151', '\152', '\153', '\154', '\155', '\156', '\157',
        '\160', '\161', '\162', '\163', '\164', '\165', '\166', '\167',
        '\170', '\171', '\172', '\133', '\134', '\135', '\136', '\137',
        '\140', '\141', '\142', '\143', '\144', '\145', '\146', '\147',
        '\150', '\151', '\152', '\153', '\154', '\155', '\156', '\157',
        '\160', '\161', '\162', '\163', '\164', '\165', '\166', '\167',
        '\170', '\171', '\172', '\173', '\174', '\175', '\176', '\177',
        '\200', '\201', '\202', '\203', '\204', '\205', '\206', '\207',
        '\210', '\211', '\212', '\213', '\214', '\215', '\216', '\217',
        '\220', '\221', '\222', '\223', '\224', '\225', '\226', '\227',
        '\230', '\231', '\232', '\233', '\234', '\235', '\236', '\237',
        '\240', '\241', '\242', '\243', '\244', '\245', '\246', '\247',
        '\250', '\251', '\252', '\253', '\254', '\255', '\256', '\257',
        '\260', '\261', '\262', '\263', '\264', '\265', '\266', '\267',
        '\270', '\271', '\272', '\273', '\274', '\275', '\276', '\277',
        '\300', '\301', '\302', '\303', '\304', '\305', '\306', '\307',
        '\310', '\311', '\312', '\313', '\314', '\315', '\316', '\317',
        '\320', '\321', '\322', '\323', '\324', '\325', '\326', '\327',
        '\330', '\331', '\332', '\333', '\334', '\335', '\336', '\337',
        '\340', '\341', '\342', '\343', '\344', '\345', '\346', '\347',
        '\350', '\351', '\352', '\353', '\354', '\355', '\356', '\357',
        '\360', '\361', '\362', '\363', '\364', '\365', '\366', '\367',
        '\370', '\371', '\372', '\373', '\374', '\375', '\376', '\377',
    };

#endif 
